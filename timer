#!/usr/bin/env python3

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#
# Tyler(UnclassedPenguin) Simple Timer 2022
#
#      Author: Tyler(UnclassedPenguin)
#         URL: https://unclassed.ca
#      GitHub: https://github.com/UnclassedPenguin/scripts/
# Description: I just wanted a simple timer that I could use if I needed
#              to keep track of some time. I'm sure this exists, but it
#              was easy enough to write on my own. I'll add more features
#              as I feel like it.
#
# -------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

import argparse
import time
import os

# Arguments section
arg_desc = 'A simple timer.'

parser = argparse.ArgumentParser(description=arg_desc)

parser.add_argument("-v", "--verbose", action="store_true", help="Slightly more information")
parser.add_argument("-b", "--binary", action="store_true", help="Display timer in binary")
parser.add_argument("-t", "--time", help="Set a time to send a notification, in seconds.")
parser.add_argument("-c", "--command", help="Command to run when timer hit, requires -  t")

args = parser.parse_args()

# Returns current time
def getTime():
    currentTime = time.strftime("%H:%M:%S")
    return currentTime

# Runs if -t is set, sets time_amount to number of seconds specified
if args.time:
    time_amount = args.time
# Sets time_amount to 0 if no -t in command
else:
    time_amount = 0

# Catches if -c/--command is used but there is no time set and exits program
if args.command and args.time == None:
    print("The -c/--command option requires a -t/--time amount! Try again using -t")
    print("Or -h for help")
    quit()

# Prints start time if -m is set
if args.verbose:
    print("Start Time: " + getTime())

# Sets timer start number
count=1
if args.binary:
    print('{:08b}'.format(count))
else:
    print(count)

# Main loop where it counts up in 1 second intervals
while True:
    try:
        count = count+1
        time.sleep(1)

        # Next couple lines are what clears the line and reprints
        LINE_FLUSH = '\r\033[K'
        UP_FRONT_LINE = '\033[F'
        if args.binary:
            print(UP_FRONT_LINE + LINE_FLUSH + '{:08b}'.format(count))
        else:
            print(UP_FRONT_LINE + LINE_FLUSH + str(count))

        # Executes when count reaches time_amount
        if count == int(time_amount):
            if args.command:
                # Sends a desktop notification when time_amount reached. Shows what     command was executed
                if args.binary:
                    binaryamount = '{:08b}'.format(int(time_amount))
                    os.system("notify-send -t 10000 'Timer' 'Time limit of " + binaryamount + " seconds reached! Executing: " + args.command + "'")
                else:
                    os.system("notify-send -t 10000 'Timer' 'Time limit of " + args.time + " seconds reached! Executing: " + args.command + "'")
                # Executes command specified by -c/--command
                os.system(args.command)
            else:
                # Shows notification when timer reached if no command was specified
                if args.binary:
                    binaryamount = '{:08b}'.format(int(time_amount))
                    os.system("notify-send -t 10000 'Timer' 'Time limit of " + binaryamount + " seconds reached!'")
                else:
                    os.system("notify-send -t 10000 'Timer' 'Time limit of " + args.time + " seconds reached!'")
            print("Thanks for using timer :)")
            break

    # Handles if ctrl-c pressed
    except KeyboardInterrupt:
        print("\n")
        if args.verbose:
            print("End Time: " + getTime())
        print("Thanks for using timer :)")
        break
